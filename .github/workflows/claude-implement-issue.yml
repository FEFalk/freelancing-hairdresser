name: Claude PR Assistant

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude-code-action:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && contains(github.event.issue.body, '@claude'))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: pnpm install

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Run Claude PR Action
        uses: grll/claude-code-action@beta
        with:
          model: claude-sonnet-4-20250514
          use_oauth: true
          claude_access_token: ${{ secrets.CLAUDE_ACCESS_TOKEN }}
          claude_refresh_token: ${{ secrets.CLAUDE_REFRESH_TOKEN }}
          claude_expires_at: ${{ secrets.CLAUDE_EXPIRES_AT }}
          timeout_minutes: "60"
          mcp_servers: |
            {
              "playwright": {
                "command": "npx",
                "args": ["-y", "@executeautomation/playwright-mcp-server"]
              }
            }
          instructions: |
            Please analyze and fix the GitHub issue: $ARGUMENTS.
            
            Follow these steps:
            
            # PLAN
            1. Use 'gh issue view' to get the issue details
            2. Understand the problem described in the issue
            3. Ask clarifying questions if necessary
            4. Understand the prior art for this issue
            - Search the scratchpads for previous thoughts related to the issue
            - Search PRs to see if you can find history on this issue
            - Search the codebase for relevant files
            5. Think harder about how to break the issue down into a series of small, manageable tasks.
            6. Document your plan in a new scratchpad
            - include the issue name in the filename
            - include a link to the issue in the scratchpad.
            
            # CREATE
            - Create a new branch for the issue
            - Solve the issue in small, manageable steps, according to your plan.
            - Commit your changes after each step.
            
            # TEST
            - Use playwright via MCP to test the changes if you have made changes to the UI
            - Write rspec tests to describe the expected behavior of your code
            - Run the full test suite to ensure you haven't broken anything
            - If the tests are failing, fix them
            - Ensure that all tests are passing before moving on to the next step
            
            # DOCUMENT
            - Ensure that the code is well-commented and easy to understand
            - Update the documentation (README.md) if necessary
            - Write a clear and concise commit message for each commit

            # DEPLOY
            - Open a PR on GitHub
            - Write a clear and concise PR description that explains the changes made
            - Include any relevant links to the issue, scratchpad, or other resources
            - Ensure that the PR is ready for review
            - Request a review
            - If the code to be applied is not suitable to be reviewed by a junior developer, tag @FEFalk as reviewer.

            Remember to use the GitHub CLI ('gh') for all GitHub-related tasks.